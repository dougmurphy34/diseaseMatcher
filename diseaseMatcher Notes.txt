Objective: Develop a citizen science game, based on ESP/Google Image Labeler model, to identify disease names in the text of biomedical research abstracts.

Features: User login/profiles, player vs. AI, time pressure, document storage and display, results storage.

Models: Artigo.org - successor to ESP
        Cyclonecenter.org and others at zooniverse.org

Tools used:     django 1.6.5 web framework (lab standard, personal preference for python over java)
		        MariaDB 10 (more feature rich than mySQL, easier administration than PostgreSQL)
		        Python 2.7
		        jQuery 1.11.1
	            Pycharm Enterprise
	            HeidiSQL
	            MySQL-python 1.2.5
	                binary from http://www.lfd.uci.edu/~gohlke/pythonlibs/
	            GitHub - source control (dougmurphy34/diseaseMatcher)
	            NO data migration - just syncdb
	                (confirmed, South does not and will not support MariaDB http://south.aeracode.org/ticket/1309)

Design Principles used:
    Unit and integration testing using unittest with frameworks
    MVC model as implemented by django
    Loose coupling
    Agile Development (Frequent functional builds)


Status of development (9/11/2014):
    If user is not logged in, they are walked through a login/registration process.  New registrations automatically logged in.
    Landing page receives user, navigates to single (random) abstract display with input form.
    User can mouse-highlight or type text (disease matches) for that abstract until 30 seconds passes, or they click "Done".
    Results are cleaned of spaces and tabs and checked for accuracy vs. title and text.  Location and offset are calculated.
    Database records: match text, length, location (title or text), offset, annotator, abstract, time into game answer was entered.
    User is given opportunity to play again or log out.
    User can view play history and ranking on user profile page.

Next steps:
    Better data validation (punctuation in user data)
    Client-side feedback on typed results
    Even better automated testing.  (Check 405 comment on StackOverflow)

Future direction:
    Build a pretty GUI - branding, images, better instructions to the user, better feedback.
    Create illusion of a "partner" playing with you (AI)

Software Design questions:
    Match types - implement?  What distinction is needed?  User input, system calculated?
    Reports?  How do we want to get the data out and present it?  Who will use the data, and how?

Product Design questions:
    Visual goals, branding, color schemes and logos.
    User data to be gathered.
    Deployment - where, when.